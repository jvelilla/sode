note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class SOD_BOX_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	x: INTEGER
			-- Access member `x`
		require
			exists: exists
		do
			Result := c_x (item)
		ensure
			result_correct: Result = c_x (item)
		end

	set_x (a_value: INTEGER) 
			-- Change the value of member `x` to `a_value`.
		require
			exists: exists
		do
			set_c_x (item, a_value)
		ensure
			x_set: a_value = x
		end

	y: INTEGER
			-- Access member `y`
		require
			exists: exists
		do
			Result := c_y (item)
		ensure
			result_correct: Result = c_y (item)
		end

	set_y (a_value: INTEGER) 
			-- Change the value of member `y` to `a_value`.
		require
			exists: exists
		do
			set_c_y (item, a_value)
		ensure
			y_set: a_value = y
		end

	w: INTEGER
			-- Access member `w`
		require
			exists: exists
		do
			Result := c_w (item)
		ensure
			result_correct: Result = c_w (item)
		end

	set_w (a_value: INTEGER) 
			-- Change the value of member `w` to `a_value`.
		require
			exists: exists
		do
			set_c_w (item, a_value)
		ensure
			w_set: a_value = w
		end

	h: INTEGER
			-- Access member `h`
		require
			exists: exists
		do
			Result := c_h (item)
		ensure
			result_correct: Result = c_h (item)
		end

	set_h (a_value: INTEGER) 
			-- Change the value of member `h` to `a_value`.
		require
			exists: exists
		do
			set_c_h (item, a_value)
		ensure
			h_set: a_value = h
		end

	score: REAL
			-- Access member `score`
		require
			exists: exists
		do
			Result := c_score (item)
		ensure
			result_correct: Result = c_score (item)
		end

	set_score (a_value: REAL) 
			-- Change the value of member `score` to `a_value`.
		require
			exists: exists
		do
			set_c_score (item, a_value)
		ensure
			score_set: a_value = score
		end

	zname:  detachable STRING
			-- Access member `zName`
		require
			exists: exists
		do
			if attached c_zname (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_zname (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_zname (a_value: STRING) 
			-- Change the value of member `zName` to `a_value`.
		require
			exists: exists
		do
			set_c_zname (item, (create {C_STRING}.make (a_value)).item )
		end

	puserdata: POINTER
			-- Access member `pUserData`
		require
			exists: exists
		do
			Result := c_puserdata (item)
		ensure
			result_correct: Result = c_puserdata (item)
		end

	set_puserdata (a_value: POINTER) 
			-- Change the value of member `pUserData` to `a_value`.
		require
			exists: exists
		do
			set_c_puserdata (item, a_value)
		ensure
			puserdata_set: a_value = puserdata
		end

feature {NONE} -- Implementation wrapper for struct struct sod_box

	sizeof_external: INTEGER 
		external
			"C inline use <sod.h>"
		alias
			"sizeof(struct sod_box)"
		end

	c_x (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->x
			]"
		end

	set_c_x (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->x =  (int)$a_value
			]"
		ensure
			x_set: a_value = c_x (an_item)
		end

	c_y (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->y
			]"
		end

	set_c_y (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->y =  (int)$a_value
			]"
		ensure
			y_set: a_value = c_y (an_item)
		end

	c_w (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->w
			]"
		end

	set_c_w (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->w =  (int)$a_value
			]"
		ensure
			w_set: a_value = c_w (an_item)
		end

	c_h (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->h
			]"
		end

	set_c_h (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->h =  (int)$a_value
			]"
		ensure
			h_set: a_value = c_h (an_item)
		end

	c_score (an_item: POINTER): REAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->score
			]"
		end

	set_c_score (an_item: POINTER; a_value: REAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->score =  (float)$a_value
			]"
		ensure
			score_set: a_value = c_score (an_item)
		end

	c_zname (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->zName
			]"
		end

	set_c_zname (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->zName =  (char const*)$a_value
			]"
		ensure
			zname_set: a_value = c_zname (an_item)
		end

	c_puserdata (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->pUserData
			]"
		end

	set_c_puserdata (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <sod.h>"
		alias
			"[
				((struct sod_box*)$an_item)->pUserData =  (void*)$a_value
			]"
		ensure
			puserdata_set: a_value = c_puserdata (an_item)
		end

end
